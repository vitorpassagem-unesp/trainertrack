{"ast":null,"code":"var _s = $RefreshSig$();\n// client/src/hooks/useAuthValidation.js\nimport { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AuthContext } from '../contexts/AuthContext';\nimport { authService } from '../services/auth.service';\nimport { isTokenExpired } from '../utils/httpInterceptor';\nexport const useAuthValidation = () => {\n  _s();\n  const {\n    user,\n    logout\n  } = useContext(AuthContext);\n  const history = useHistory();\n  useEffect(() => {\n    const validateAuth = () => {\n      const token = localStorage.getItem('token');\n\n      // Se não há token, redirecionar para login\n      if (!token) {\n        if (user) {\n          logout();\n        }\n        return;\n      }\n\n      // Se token expirado, fazer logout e redirecionar\n      if (isTokenExpired(token)) {\n        console.log('🔒 Token expirado detectado no hook. Fazendo logout...');\n        logout();\n        history.push('/login');\n        return;\n      }\n\n      // Se há token válido mas não há usuário no contexto, tentar recuperar\n      if (!user && token && !isTokenExpired(token)) {\n        const storedUser = authService.getCurrentUser();\n        if (!storedUser) {\n          // Se não conseguir recuperar usuário, fazer logout\n          logout();\n          history.push('/login');\n        }\n      }\n    };\n\n    // Validar imediatamente\n    validateAuth();\n\n    // Configurar validação periódica (a cada 30 segundos)\n    const interval = setInterval(validateAuth, 30000);\n\n    // Cleanup\n    return () => clearInterval(interval);\n  }, [user, logout, history]);\n  return {\n    isValid: authService.isAuthenticated(),\n    user\n  };\n};\n_s(useAuthValidation, \"L4x/rQ+nRllP+XN9Ujze7ylgUPM=\", false, function () {\n  return [useHistory];\n});\nexport default useAuthValidation;","map":{"version":3,"names":["useEffect","useContext","useHistory","AuthContext","authService","isTokenExpired","useAuthValidation","_s","user","logout","history","validateAuth","token","localStorage","getItem","console","log","push","storedUser","getCurrentUser","interval","setInterval","clearInterval","isValid","isAuthenticated"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/hooks/useAuthValidation.js"],"sourcesContent":["// client/src/hooks/useAuthValidation.js\r\nimport { useEffect, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport { authService } from '../services/auth.service';\r\nimport { isTokenExpired } from '../utils/httpInterceptor';\r\n\r\nexport const useAuthValidation = () => {\r\n    const { user, logout } = useContext(AuthContext);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const validateAuth = () => {\r\n            const token = localStorage.getItem('token');\r\n            \r\n            // Se não há token, redirecionar para login\r\n            if (!token) {\r\n                if (user) {\r\n                    logout();\r\n                }\r\n                return;\r\n            }\r\n\r\n            // Se token expirado, fazer logout e redirecionar\r\n            if (isTokenExpired(token)) {\r\n                console.log('🔒 Token expirado detectado no hook. Fazendo logout...');\r\n                logout();\r\n                history.push('/login');\r\n                return;\r\n            }\r\n\r\n            // Se há token válido mas não há usuário no contexto, tentar recuperar\r\n            if (!user && token && !isTokenExpired(token)) {\r\n                const storedUser = authService.getCurrentUser();\r\n                if (!storedUser) {\r\n                    // Se não conseguir recuperar usuário, fazer logout\r\n                    logout();\r\n                    history.push('/login');\r\n                }\r\n            }\r\n        };\r\n\r\n        // Validar imediatamente\r\n        validateAuth();\r\n\r\n        // Configurar validação periódica (a cada 30 segundos)\r\n        const interval = setInterval(validateAuth, 30000);\r\n\r\n        // Cleanup\r\n        return () => clearInterval(interval);\r\n    }, [user, logout, history]);\r\n\r\n    return {\r\n        isValid: authService.isAuthenticated(),\r\n        user\r\n    };\r\n};\r\n\r\nexport default useAuthValidation;\r\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7C,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM;IAAEC,IAAI;IAAEC;EAAO,CAAC,GAAGR,UAAU,CAACE,WAAW,CAAC;EAChD,MAAMO,OAAO,GAAGR,UAAU,CAAC,CAAC;EAE5BF,SAAS,CAAC,MAAM;IACZ,MAAMW,YAAY,GAAGA,CAAA,KAAM;MACvB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;MAE3C;MACA,IAAI,CAACF,KAAK,EAAE;QACR,IAAIJ,IAAI,EAAE;UACNC,MAAM,CAAC,CAAC;QACZ;QACA;MACJ;;MAEA;MACA,IAAIJ,cAAc,CAACO,KAAK,CAAC,EAAE;QACvBG,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;QACrEP,MAAM,CAAC,CAAC;QACRC,OAAO,CAACO,IAAI,CAAC,QAAQ,CAAC;QACtB;MACJ;;MAEA;MACA,IAAI,CAACT,IAAI,IAAII,KAAK,IAAI,CAACP,cAAc,CAACO,KAAK,CAAC,EAAE;QAC1C,MAAMM,UAAU,GAAGd,WAAW,CAACe,cAAc,CAAC,CAAC;QAC/C,IAAI,CAACD,UAAU,EAAE;UACb;UACAT,MAAM,CAAC,CAAC;UACRC,OAAO,CAACO,IAAI,CAAC,QAAQ,CAAC;QAC1B;MACJ;IACJ,CAAC;;IAED;IACAN,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMS,QAAQ,GAAGC,WAAW,CAACV,YAAY,EAAE,KAAK,CAAC;;IAEjD;IACA,OAAO,MAAMW,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACZ,IAAI,EAAEC,MAAM,EAAEC,OAAO,CAAC,CAAC;EAE3B,OAAO;IACHa,OAAO,EAAEnB,WAAW,CAACoB,eAAe,CAAC,CAAC;IACtChB;EACJ,CAAC;AACL,CAAC;AAACD,EAAA,CAjDWD,iBAAiB;EAAA,QAEVJ,UAAU;AAAA;AAiD9B,eAAeI,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}