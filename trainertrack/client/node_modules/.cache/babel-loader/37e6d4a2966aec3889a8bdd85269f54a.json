{"ast":null,"code":"// client/src/utils/httpInterceptor.js\nimport axios from 'axios';\nimport { authService } from '../services/auth.service';\nlet isRedirecting = false;\n\n// FunÃ§Ã£o para redirecionar para login\nconst redirectToLogin = () => {\n  if (!isRedirecting) {\n    isRedirecting = true;\n\n    // Limpar dados de autenticaÃ§Ã£o\n    authService.logout();\n\n    // Aguardar um pouco antes de redirecionar para evitar mÃºltiplos redirecionamentos\n    setTimeout(() => {\n      window.location.href = '/login';\n      isRedirecting = false;\n    }, 100);\n  }\n};\n\n// Interceptor para requisiÃ§Ãµes\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para respostas\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  const {\n    response\n  } = error;\n\n  // Verificar se o erro Ã© de token expirado/invÃ¡lido\n  if (response && (response.status === 401 || response.status === 403)) {\n    var _response$data, _response$data2;\n    const errorMessage = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.error) || '';\n\n    // Verificar mensagens especÃ­ficas de token invÃ¡lido/expirado\n    const tokenExpiredMessages = ['token expired', 'token invalid', 'jwt expired', 'jwt malformed', 'invalid token', 'unauthorized', 'no token provided', 'access denied'];\n    const isTokenError = tokenExpiredMessages.some(msg => errorMessage.toLowerCase().includes(msg));\n    if (isTokenError) {\n      console.log('ðŸ”’ Token expirado ou invÃ¡lido. Redirecionando para login...');\n      redirectToLogin();\n      return Promise.reject(new Error('Token expirado. Redirecionando para login...'));\n    }\n  }\n  return Promise.reject(error);\n});\n\n// FunÃ§Ã£o para verificar se o token estÃ¡ expirado (decodificaÃ§Ã£o JWT bÃ¡sica)\nexport const isTokenExpired = token => {\n  if (!token) return true;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const currentTime = Date.now() / 1000;\n\n    // Verificar se o token tem campo exp e se estÃ¡ expirado\n    if (payload.exp && payload.exp < currentTime) {\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar expiraÃ§Ã£o do token:', error);\n    return true; // Se nÃ£o conseguir verificar, considerar expirado\n  }\n};\n\n// FunÃ§Ã£o para verificar token periodicamente\nexport const startTokenValidation = () => {\n  const checkToken = () => {\n    const token = localStorage.getItem('token');\n    if (token && isTokenExpired(token)) {\n      console.log('ðŸ”’ Token expirado detectado. Redirecionando para login...');\n      redirectToLogin();\n      return;\n    }\n\n    // Verificar novamente em 1 minuto\n    setTimeout(checkToken, 60000);\n  };\n\n  // Iniciar verificaÃ§Ã£o\n  checkToken();\n};\nexport default {\n  isTokenExpired,\n  startTokenValidation,\n  redirectToLogin\n};","map":{"version":3,"names":["axios","authService","isRedirecting","redirectToLogin","logout","setTimeout","window","location","href","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","_response$data","_response$data2","errorMessage","data","message","tokenExpiredMessages","isTokenError","some","msg","toLowerCase","includes","console","log","Error","isTokenExpired","payload","JSON","parse","atob","split","currentTime","Date","now","exp","startTokenValidation","checkToken"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/utils/httpInterceptor.js"],"sourcesContent":["// client/src/utils/httpInterceptor.js\r\nimport axios from 'axios';\r\nimport { authService } from '../services/auth.service';\r\n\r\nlet isRedirecting = false;\r\n\r\n// FunÃ§Ã£o para redirecionar para login\r\nconst redirectToLogin = () => {\r\n    if (!isRedirecting) {\r\n        isRedirecting = true;\r\n        \r\n        // Limpar dados de autenticaÃ§Ã£o\r\n        authService.logout();\r\n        \r\n        // Aguardar um pouco antes de redirecionar para evitar mÃºltiplos redirecionamentos\r\n        setTimeout(() => {\r\n            window.location.href = '/login';\r\n            isRedirecting = false;\r\n        }, 100);\r\n    }\r\n};\r\n\r\n// Interceptor para requisiÃ§Ãµes\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Interceptor para respostas\r\naxios.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    (error) => {\r\n        const { response } = error;\r\n        \r\n        // Verificar se o erro Ã© de token expirado/invÃ¡lido\r\n        if (response && (response.status === 401 || response.status === 403)) {\r\n            const errorMessage = response.data?.message || response.data?.error || '';\r\n            \r\n            // Verificar mensagens especÃ­ficas de token invÃ¡lido/expirado\r\n            const tokenExpiredMessages = [\r\n                'token expired',\r\n                'token invalid',\r\n                'jwt expired',\r\n                'jwt malformed',\r\n                'invalid token',\r\n                'unauthorized',\r\n                'no token provided',\r\n                'access denied'\r\n            ];\r\n            \r\n            const isTokenError = tokenExpiredMessages.some(msg => \r\n                errorMessage.toLowerCase().includes(msg)\r\n            );\r\n            \r\n            if (isTokenError) {\r\n                console.log('ðŸ”’ Token expirado ou invÃ¡lido. Redirecionando para login...');\r\n                redirectToLogin();\r\n                return Promise.reject(new Error('Token expirado. Redirecionando para login...'));\r\n            }\r\n        }\r\n        \r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// FunÃ§Ã£o para verificar se o token estÃ¡ expirado (decodificaÃ§Ã£o JWT bÃ¡sica)\r\nexport const isTokenExpired = (token) => {\r\n    if (!token) return true;\r\n    \r\n    try {\r\n        const payload = JSON.parse(atob(token.split('.')[1]));\r\n        const currentTime = Date.now() / 1000;\r\n        \r\n        // Verificar se o token tem campo exp e se estÃ¡ expirado\r\n        if (payload.exp && payload.exp < currentTime) {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    } catch (error) {\r\n        console.error('Erro ao verificar expiraÃ§Ã£o do token:', error);\r\n        return true; // Se nÃ£o conseguir verificar, considerar expirado\r\n    }\r\n};\r\n\r\n// FunÃ§Ã£o para verificar token periodicamente\r\nexport const startTokenValidation = () => {\r\n    const checkToken = () => {\r\n        const token = localStorage.getItem('token');\r\n        \r\n        if (token && isTokenExpired(token)) {\r\n            console.log('ðŸ”’ Token expirado detectado. Redirecionando para login...');\r\n            redirectToLogin();\r\n            return;\r\n        }\r\n        \r\n        // Verificar novamente em 1 minuto\r\n        setTimeout(checkToken, 60000);\r\n    };\r\n    \r\n    // Iniciar verificaÃ§Ã£o\r\n    checkToken();\r\n};\r\n\r\nexport default {\r\n    isTokenExpired,\r\n    startTokenValidation,\r\n    redirectToLogin\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}