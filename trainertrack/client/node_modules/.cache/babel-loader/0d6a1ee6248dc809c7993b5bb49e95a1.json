{"ast":null,"code":"import axios from 'axios';\nimport { isTokenExpired } from '../utils/httpInterceptor';\nconst API_URL = 'http://localhost:5000/api/auth/';\nconst register = async userData => {\n  try {\n    const response = await axios.post(API_URL + 'register', userData);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Registration error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nconst login = async (email, password) => {\n  try {\n    const response = await axios.post(API_URL + 'login', {\n      email,\n      password\n    });\n    if (response.data.token) {\n      // Store user info and token in localStorage\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify(response.data.user));\n      localStorage.setItem('userRole', response.data.user.role || 'user');\n    }\n    return response.data.user;\n  } catch (error) {\n    var _error$response2;\n    console.error('Login error:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\nconst logout = () => {\n  // Limpar todos os dados relacionados à autenticação\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  localStorage.removeItem('userRole');\n\n  // Limpar qualquer cache do axios se existir\n  delete axios.defaults.headers.common['Authorization'];\n  console.log('Dados de autenticação removidos do localStorage');\n};\nconst getCurrentUser = () => {\n  try {\n    const userStr = localStorage.getItem('user');\n    const token = localStorage.getItem('token');\n\n    // Só retorna usuário se tem token válido também\n    if (userStr && token) {\n      return JSON.parse(userStr);\n    }\n    return null;\n  } catch (error) {\n    console.error('Erro ao recuperar usuário do localStorage:', error);\n    // Se há erro ao parsear, limpar dados corrompidos\n    logout();\n    return null;\n  }\n};\nconst isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  const user = getCurrentUser();\n  return !!(token && user);\n};\n\n// Add auth state change listener for AuthContext\nconst onAuthStateChanged = callback => {\n  const user = getCurrentUser();\n  callback(user);\n  return () => {}; // Return empty function for unsubscribe\n};\nexport const authService = {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  isAuthenticated,\n  onAuthStateChanged\n};","map":{"version":3,"names":["axios","isTokenExpired","API_URL","register","userData","response","post","data","error","_error$response","console","message","login","email","password","token","localStorage","setItem","JSON","stringify","user","role","_error$response2","logout","removeItem","defaults","headers","common","log","getCurrentUser","userStr","getItem","parse","isAuthenticated","onAuthStateChanged","callback","authService"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\nimport { isTokenExpired } from '../utils/httpInterceptor';\n\nconst API_URL = 'http://localhost:5000/api/auth/';\n\nconst register = async (userData) => {\n    try {\n        const response = await axios.post(API_URL + 'register', userData);\n        return response.data;\n    } catch (error) {\n        console.error('Registration error:', error.response?.data || error.message);\n        throw error;\n    }\n};\n\nconst login = async (email, password) => {\n    try {\n        const response = await axios.post(API_URL + 'login', {\n            email,\n            password,\n        });\n        \n        if (response.data.token) {\n            // Store user info and token in localStorage\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('user', JSON.stringify(response.data.user));\n            localStorage.setItem('userRole', response.data.user.role || 'user');\n        }\n        return response.data.user;\n    } catch (error) {\n        console.error('Login error:', error.response?.data || error.message);\n        throw error;\n    }\n};\n\nconst logout = () => {\n    // Limpar todos os dados relacionados à autenticação\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('userRole');\n    \n    // Limpar qualquer cache do axios se existir\n    delete axios.defaults.headers.common['Authorization'];\n    \n    console.log('Dados de autenticação removidos do localStorage');\n};\n\nconst getCurrentUser = () => {\n    try {\n        const userStr = localStorage.getItem('user');\n        const token = localStorage.getItem('token');\n        \n        // Só retorna usuário se tem token válido também\n        if (userStr && token) {\n            return JSON.parse(userStr);\n        }\n        return null;\n    } catch (error) {\n        console.error('Erro ao recuperar usuário do localStorage:', error);\n        // Se há erro ao parsear, limpar dados corrompidos\n        logout();\n        return null;\n    }\n};\n\nconst isAuthenticated = () => {\n    const token = localStorage.getItem('token');\n    const user = getCurrentUser();\n    return !!(token && user);\n};\n\n// Add auth state change listener for AuthContext\nconst onAuthStateChanged = (callback) => {\n    const user = getCurrentUser();\n    callback(user);\n    return () => {}; // Return empty function for unsubscribe\n};\n\nexport const authService = {\n    register,\n    login,\n    logout,\n    getCurrentUser,\n    isAuthenticated,\n    onAuthStateChanged\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}