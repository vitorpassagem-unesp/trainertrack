{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitor Passagem\\\\Desktop\\\\TrainerTrack-project\\\\trainertrack\\\\client\\\\src\\\\contexts\\\\ClientContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useCallback } from 'react';\nimport * as clientService from '../services/client.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ClientContext = /*#__PURE__*/createContext();\nexport const ClientProvider = ({\n  children\n}) => {\n  _s();\n  const [clients, setClients] = useState([]);\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchClients = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await clientService.getClients();\n      setClients(data);\n    } catch (err) {\n      console.error(\"Error fetching clients:\", err);\n      setError(\"Failed to load clients. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const fetchClientById = useCallback(async clientId => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await clientService.getClientById(clientId);\n      setSelectedClient(data);\n      return data;\n    } catch (err) {\n      console.error(`Error fetching client ${clientId}:`, err);\n      setError(\"Failed to load client details. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const addClient = async clientData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const newClient = await clientService.createClient(clientData);\n      setClients(prevClients => [...prevClients, newClient]);\n      return newClient;\n    } catch (err) {\n      console.error(\"Error adding client:\", err);\n      setError(\"Failed to add client. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateClient = async (clientId, updatedData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const updatedClient = await clientService.updateClient(clientId, updatedData);\n      setClients(prevClients => prevClients.map(client => client._id === clientId ? updatedClient : client));\n      if (selectedClient && selectedClient._id === clientId) {\n        setSelectedClient(updatedClient);\n      }\n      return updatedClient;\n    } catch (err) {\n      console.error(`Error updating client ${clientId}:`, err);\n      setError(\"Failed to update client. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteClient = async clientId => {\n    try {\n      setLoading(true);\n      setError(null);\n      await clientService.deleteClient(clientId);\n      setClients(prevClients => prevClients.filter(client => client._id !== clientId));\n      if (selectedClient && selectedClient._id === clientId) {\n        setSelectedClient(null);\n      }\n      return true;\n    } catch (err) {\n      console.error(`Error deleting client ${clientId}:`, err);\n      setError(\"Failed to delete client. Please try again later.\");\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: {\n      clients,\n      selectedClient,\n      loading,\n      error,\n      fetchClients,\n      fetchClientById,\n      addClient,\n      updateClient,\n      deleteClient\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(ClientProvider, \"vZqqfZZvvrUvptEfPVFij7+WgFk=\");\n_c = ClientProvider;\nvar _c;\n$RefreshReg$(_c, \"ClientProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","clientService","jsxDEV","_jsxDEV","ClientContext","ClientProvider","children","_s","clients","setClients","selectedClient","setSelectedClient","loading","setLoading","error","setError","fetchClients","data","getClients","err","console","fetchClientById","clientId","getClientById","addClient","clientData","newClient","createClient","prevClients","updateClient","updatedData","updatedClient","map","client","_id","deleteClient","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/contexts/ClientContext.jsx"],"sourcesContent":["import React, { createContext, useState, useCallback } from 'react';\nimport * as clientService from '../services/client.service';\n\nexport const ClientContext = createContext();\n\nexport const ClientProvider = ({ children }) => {\n    const [clients, setClients] = useState([]);\n    const [selectedClient, setSelectedClient] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const fetchClients = useCallback(async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            const data = await clientService.getClients();\n            setClients(data);\n        } catch (err) {\n            console.error(\"Error fetching clients:\", err);\n            setError(\"Failed to load clients. Please try again later.\");\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    const fetchClientById = useCallback(async (clientId) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const data = await clientService.getClientById(clientId);\n            setSelectedClient(data);\n            return data;\n        } catch (err) {\n            console.error(`Error fetching client ${clientId}:`, err);\n            setError(\"Failed to load client details. Please try again later.\");\n            return null;\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    const addClient = async (clientData) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const newClient = await clientService.createClient(clientData);\n            setClients((prevClients) => [...prevClients, newClient]);\n            return newClient;\n        } catch (err) {\n            console.error(\"Error adding client:\", err);\n            setError(\"Failed to add client. Please try again later.\");\n            return null;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const updateClient = async (clientId, updatedData) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const updatedClient = await clientService.updateClient(clientId, updatedData);\n            setClients((prevClients) =>\n                prevClients.map((client) => (client._id === clientId ? updatedClient : client))\n            );\n            \n            if (selectedClient && selectedClient._id === clientId) {\n                setSelectedClient(updatedClient);\n            }\n            \n            return updatedClient;\n        } catch (err) {\n            console.error(`Error updating client ${clientId}:`, err);\n            setError(\"Failed to update client. Please try again later.\");\n            return null;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const deleteClient = async (clientId) => {\n        try {\n            setLoading(true);\n            setError(null);\n            await clientService.deleteClient(clientId);\n            setClients((prevClients) => prevClients.filter((client) => client._id !== clientId));\n            \n            if (selectedClient && selectedClient._id === clientId) {\n                setSelectedClient(null);\n            }\n            \n            return true;\n        } catch (err) {\n            console.error(`Error deleting client ${clientId}:`, err);\n            setError(\"Failed to delete client. Please try again later.\");\n            return false;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <ClientContext.Provider \n            value={{ \n                clients, \n                selectedClient,\n                loading, \n                error, \n                fetchClients, \n                fetchClientById,\n                addClient, \n                updateClient, \n                deleteClient \n            }}\n        >\n            {children}\n        </ClientContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}