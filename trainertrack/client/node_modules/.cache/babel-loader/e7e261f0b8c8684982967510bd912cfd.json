{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/clients/';\n\n// Add auth token to requests\nconst getAuthHeader = () => {\n  const token = localStorage.getItem('token');\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Function to get all clients\nexport const getClients = async () => {\n  try {\n    const response = await axios.get(API_URL, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching clients:', error);\n    throw error;\n  }\n};\n\n// Function to get a client by ID\nexport const getClientById = async clientId => {\n  try {\n    const response = await axios.get(`${API_URL}${clientId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching client ${clientId}:`, error);\n    throw error;\n  }\n};\n\n// Function to create a new client\nexport const createClient = async clientData => {\n  try {\n    const response = await axios.post(API_URL, clientData, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating client:', error);\n    throw error;\n  }\n};\n\n// Function to update an existing client\nexport const updateClient = async (clientId, clientData) => {\n  try {\n    const response = await axios.put(`${API_URL}${clientId}`, clientData, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating client ${clientId}:`, error);\n    throw error;\n  }\n};\n\n// Function to delete a client\nexport const deleteClient = async clientId => {\n  try {\n    const response = await axios.delete(`${API_URL}${clientId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error deleting client ${clientId}:`, error);\n    throw error;\n  }\n};\n\n// Function to get all clients based on user role\nexport const getAllClients = async () => {\n  try {\n    // Get user info to determine the correct endpoint\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n\n    // Decode token to get user role (simple approach)\n    const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n    const userRole = tokenPayload.role;\n    let endpoint;\n    if (userRole === 'trainer') {\n      endpoint = 'http://localhost:5000/api/trainer/clients';\n    } else if (userRole === 'admin') {\n      endpoint = 'http://localhost:5000/api/admin/clients';\n    } else {\n      endpoint = API_URL; // Default client endpoint\n    }\n    const response = await axios.get(endpoint, {\n      headers: getAuthHeader()\n    });\n    return response;\n  } catch (error) {\n    console.error('Error fetching clients:', error);\n    throw new Error('Falha ao buscar clientes do treinador');\n  }\n};\n\n// Default export with all functions\nconst clientService = {\n  getClients,\n  getAllClients,\n  getClientById,\n  createClient,\n  updateClient,\n  deleteClient\n};\nexport default clientService;","map":{"version":3,"names":["axios","API_URL","getAuthHeader","token","localStorage","getItem","Authorization","getClients","response","get","headers","data","error","console","getClientById","clientId","createClient","clientData","post","updateClient","put","deleteClient","delete","getAllClients","Error","tokenPayload","JSON","parse","atob","split","userRole","role","endpoint","clientService"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/services/client.service.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api/clients/';\n\n// Add auth token to requests\nconst getAuthHeader = () => {\n    const token = localStorage.getItem('token');\n    return token ? { Authorization: `Bearer ${token}` } : {};\n};\n\n// Function to get all clients\nexport const getClients = async () => {\n    try {\n        const response = await axios.get(API_URL, { \n            headers: getAuthHeader() \n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching clients:', error);\n        throw error;\n    }\n};\n\n// Function to get a client by ID\nexport const getClientById = async (clientId) => {\n    try {\n        const response = await axios.get(`${API_URL}${clientId}`, { \n            headers: getAuthHeader() \n        });\n        return response.data;\n    } catch (error) {\n        console.error(`Error fetching client ${clientId}:`, error);\n        throw error;\n    }\n};\n\n// Function to create a new client\nexport const createClient = async (clientData) => {\n    try {\n        const response = await axios.post(API_URL, clientData, { \n            headers: getAuthHeader() \n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error creating client:', error);\n        throw error;\n    }\n};\n\n// Function to update an existing client\nexport const updateClient = async (clientId, clientData) => {\n    try {\n        const response = await axios.put(`${API_URL}${clientId}`, clientData, { \n            headers: getAuthHeader() \n        });\n        return response.data;\n    } catch (error) {\n        console.error(`Error updating client ${clientId}:`, error);\n        throw error;\n    }\n};\n\n// Function to delete a client\nexport const deleteClient = async (clientId) => {\n    try {\n        const response = await axios.delete(`${API_URL}${clientId}`, { \n            headers: getAuthHeader() \n        });\n        return response.data;\n    } catch (error) {\n        console.error(`Error deleting client ${clientId}:`, error);\n        throw error;\n    }\n};\n\n// Function to get all clients based on user role\nexport const getAllClients = async () => {\n    try {\n        // Get user info to determine the correct endpoint\n        const token = localStorage.getItem('token');\n        if (!token) {\n            throw new Error('No authentication token found');\n        }\n\n        // Decode token to get user role (simple approach)\n        const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n        const userRole = tokenPayload.role;\n\n        let endpoint;\n        if (userRole === 'trainer') {\n            endpoint = 'http://localhost:5000/api/trainer/clients';\n        } else if (userRole === 'admin') {\n            endpoint = 'http://localhost:5000/api/admin/clients';\n        } else {\n            endpoint = API_URL; // Default client endpoint\n        }\n\n        const response = await axios.get(endpoint, { \n            headers: getAuthHeader() \n        });\n        return response;\n    } catch (error) {\n        console.error('Error fetching clients:', error);\n        throw new Error('Falha ao buscar clientes do treinador');\n    }\n};\n\n// Default export with all functions\nconst clientService = {\n    getClients,\n    getAllClients,\n    getClientById,\n    createClient,\n    updateClient,\n    deleteClient\n};\n\nexport default clientService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}