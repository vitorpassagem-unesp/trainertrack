{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitor Passagem\\\\Desktop\\\\TrainerTrack-project\\\\trainertrack\\\\client\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { authService } from '../services/auth.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const checkAuth = () => {\n      const userData = authService.getCurrentUser();\n      if (userData) {\n        setUser(userData);\n        setIsAuthenticated(true);\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      console.log('Login attempt with:', email);\n      const userData = await authService.login(email, password);\n      console.log('Login successful:', userData);\n      setUser(userData);\n      setIsAuthenticated(true);\n      return userData;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      // Limpar dados do localStorage\n      authService.logout();\n\n      // Limpar estado do contexto\n      setUser(null);\n      setIsAuthenticated(false);\n      console.log('Logout realizado com sucesso');\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n\n      // Mesmo se houver erro, limpar o estado local\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const response = await authService.register(username, email, password);\n      // After registration, we'll need to log in\n      return response;\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      throw error;\n    }\n  };\n\n  // Helper function to check if the current user is an admin\n  const isAdmin = user && user.role === 'admin';\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      isAuthenticated,\n      isAdmin,\n      login,\n      logout,\n      register\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuth","userData","getCurrentUser","login","email","password","console","log","error","logout","register","username","response","isAdmin","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { authService } from '../services/auth.service';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    useEffect(() => {\n        // Check if user is logged in from localStorage\n        const checkAuth = () => {\n            const userData = authService.getCurrentUser();\n            if (userData) {\n                setUser(userData);\n                setIsAuthenticated(true);\n            }\n            setLoading(false);\n        };\n        \n        checkAuth();\n    }, []);\n\n    const login = async (email, password) => {\n        try {\n            console.log('Login attempt with:', email);\n            const userData = await authService.login(email, password);\n            console.log('Login successful:', userData);\n            setUser(userData);\n            setIsAuthenticated(true);\n            return userData;\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            throw error;\n        }\n    };\n\n    const logout = async () => {\n        try {\n            // Limpar dados do localStorage\n            authService.logout();\n            \n            // Limpar estado do contexto\n            setUser(null);\n            setIsAuthenticated(false);\n            \n            console.log('Logout realizado com sucesso');\n        } catch (error) {\n            console.error(\"Logout error:\", error);\n            \n            // Mesmo se houver erro, limpar o estado local\n            setUser(null);\n            setIsAuthenticated(false);\n            \n            throw error;\n        }\n    };\n\n    const register = async (username, email, password) => {\n        try {\n            const response = await authService.register(username, email, password);\n            // After registration, we'll need to log in\n            return response;\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            throw error;\n        }\n    };\n\n    // Helper function to check if the current user is an admin\n    const isAdmin = user && user.role === 'admin';\n\n    return (\n        <AuthContext.Provider value={{ \n            user, \n            loading, \n            isAuthenticated,\n            isAdmin,\n            login, \n            logout, \n            register \n        }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}