{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitor Passagem\\\\Desktop\\\\TrainerTrack-project\\\\trainertrack\\\\client\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { authService } from '../services/auth.service';\nimport { isTokenExpired, startTokenValidation } from '../utils/httpInterceptor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const checkAuth = () => {\n      try {\n        const token = localStorage.getItem('token');\n        const userData = authService.getCurrentUser();\n\n        // Verificar se token existe e não está expirado\n        if (userData && token && !isTokenExpired(token)) {\n          setUser(userData);\n          setIsAuthenticated(true);\n\n          // Iniciar validação automática de token apenas se usuário autenticado\n          startTokenValidation();\n        } else {\n          // Se não tem dados completos ou token expirado, limpar tudo\n          if (token && isTokenExpired(token)) {\n            console.log('🔒 Token expirado detectado no AuthContext. Limpando dados...');\n          }\n          authService.logout();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        console.error('Erro ao verificar autenticação:', error);\n        // Em caso de erro, limpar estado\n        authService.logout();\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n      setLoading(false);\n    };\n    checkAuth();\n\n    // Verificar autenticação periodicamente (a cada 2 minutos)\n    const interval = setInterval(() => {\n      const token = localStorage.getItem('token');\n      if (token && isTokenExpired(token)) {\n        console.log('🔒 Token expirado detectado na verificação periódica. Fazendo logout...');\n        logout();\n      }\n    }, 120000); // 2 minutos\n\n    return () => clearInterval(interval);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      console.log('Login attempt with:', email);\n      const userData = await authService.login(email, password);\n      console.log('Login successful:', userData);\n      setUser(userData);\n      setIsAuthenticated(true);\n      return userData;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      // Limpar dados do localStorage\n      authService.logout();\n\n      // Limpar estado do contexto\n      setUser(null);\n      setIsAuthenticated(false);\n      console.log('Logout realizado com sucesso');\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n\n      // Mesmo se houver erro, limpar o estado local\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const response = await authService.register(username, email, password);\n      // After registration, we'll need to log in\n      return response;\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      throw error;\n    }\n  };\n\n  // Helper function to check if the current user is an admin\n  const isAdmin = user && user.role === 'admin';\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      isAuthenticated,\n      isAdmin,\n      login,\n      logout,\n      register\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","isTokenExpired","startTokenValidation","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuth","token","localStorage","getItem","userData","getCurrentUser","console","log","logout","error","interval","setInterval","clearInterval","login","email","password","register","username","response","isAdmin","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { authService } from '../services/auth.service';\nimport { isTokenExpired, startTokenValidation } from '../utils/httpInterceptor';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    useEffect(() => {\n        // Check if user is logged in from localStorage\n        const checkAuth = () => {\n            try {\n                const token = localStorage.getItem('token');\n                const userData = authService.getCurrentUser();\n                \n                // Verificar se token existe e não está expirado\n                if (userData && token && !isTokenExpired(token)) {\n                    setUser(userData);\n                    setIsAuthenticated(true);\n                    \n                    // Iniciar validação automática de token apenas se usuário autenticado\n                    startTokenValidation();\n                } else {\n                    // Se não tem dados completos ou token expirado, limpar tudo\n                    if (token && isTokenExpired(token)) {\n                        console.log('🔒 Token expirado detectado no AuthContext. Limpando dados...');\n                    }\n                    authService.logout();\n                    setUser(null);\n                    setIsAuthenticated(false);\n                }\n            } catch (error) {\n                console.error('Erro ao verificar autenticação:', error);\n                // Em caso de erro, limpar estado\n                authService.logout();\n                setUser(null);\n                setIsAuthenticated(false);\n            }\n            setLoading(false);\n        };\n        \n        checkAuth();\n\n        // Verificar autenticação periodicamente (a cada 2 minutos)\n        const interval = setInterval(() => {\n            const token = localStorage.getItem('token');\n            if (token && isTokenExpired(token)) {\n                console.log('🔒 Token expirado detectado na verificação periódica. Fazendo logout...');\n                logout();\n            }\n        }, 120000); // 2 minutos\n\n        return () => clearInterval(interval);\n    }, []);\n\n    const login = async (email, password) => {\n        try {\n            console.log('Login attempt with:', email);\n            const userData = await authService.login(email, password);\n            console.log('Login successful:', userData);\n            setUser(userData);\n            setIsAuthenticated(true);\n            return userData;\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            throw error;\n        }\n    };\n\n    const logout = async () => {\n        try {\n            // Limpar dados do localStorage\n            authService.logout();\n            \n            // Limpar estado do contexto\n            setUser(null);\n            setIsAuthenticated(false);\n            \n            console.log('Logout realizado com sucesso');\n        } catch (error) {\n            console.error(\"Logout error:\", error);\n            \n            // Mesmo se houver erro, limpar o estado local\n            setUser(null);\n            setIsAuthenticated(false);\n            \n            throw error;\n        }\n    };\n\n    const register = async (username, email, password) => {\n        try {\n            const response = await authService.register(username, email, password);\n            // After registration, we'll need to log in\n            return response;\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            throw error;\n        }\n    };\n\n    // Helper function to check if the current user is an admin\n    const isAdmin = user && user.role === 'admin';\n\n    return (\n        <AuthContext.Provider value={{ \n            user, \n            loading, \n            isAuthenticated,\n            isAdmin,\n            login, \n            logout, \n            register \n        }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}