{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitor Passagem\\\\Desktop\\\\TrainerTrack-project\\\\trainertrack\\\\client\\\\src\\\\contexts\\\\ClientContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useCallback, useContext } from 'react';\nimport * as clientService from '../services/client.service';\nimport { AuthContext } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ClientContext = /*#__PURE__*/createContext();\nexport const ClientProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [clients, setClients] = useState([]);\n  const [selectedClient, setSelectedClient] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchClients = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // If user is trainer, use trainer API, otherwise use regular client API\n      let data;\n      if (user && user.role === 'trainer') {\n        // Use trainer-specific API to get only their clients\n        const response = await fetch('http://localhost:5000/api/trainer/my-clients', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          data = await response.json();\n        } else {\n          throw new Error('Failed to fetch trainer clients');\n        }\n      } else {\n        // Use regular client service (for admin)\n        data = await clientService.getClients();\n      }\n      setClients(data);\n    } catch (err) {\n      console.error(\"Error fetching clients:\", err);\n      setError(\"Failed to load clients. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n  const fetchClientById = useCallback(async clientId => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await clientService.getClientById(clientId);\n      setSelectedClient(data);\n      return data;\n    } catch (err) {\n      console.error(`Error fetching client ${clientId}:`, err);\n      setError(\"Failed to load client details. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const addClient = async clientData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const newClient = await clientService.createClient(clientData);\n      setClients(prevClients => [...prevClients, newClient]);\n      return newClient;\n    } catch (err) {\n      console.error(\"Error adding client:\", err);\n      setError(\"Failed to add client. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateClient = async (clientId, updatedData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const updatedClient = await clientService.updateClient(clientId, updatedData);\n      setClients(prevClients => prevClients.map(client => client._id === clientId ? updatedClient : client));\n      if (selectedClient && selectedClient._id === clientId) {\n        setSelectedClient(updatedClient);\n      }\n      return updatedClient;\n    } catch (err) {\n      console.error(`Error updating client ${clientId}:`, err);\n      setError(\"Failed to update client. Please try again later.\");\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteClient = async clientId => {\n    try {\n      setLoading(true);\n      setError(null);\n      await clientService.deleteClient(clientId);\n      setClients(prevClients => prevClients.filter(client => client._id !== clientId));\n      if (selectedClient && selectedClient._id === clientId) {\n        setSelectedClient(null);\n      }\n      return true;\n    } catch (err) {\n      console.error(`Error deleting client ${clientId}:`, err);\n      setError(\"Failed to delete client. Please try again later.\");\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: {\n      clients,\n      selectedClient,\n      loading,\n      error,\n      fetchClients,\n      fetchClientById,\n      addClient,\n      updateClient,\n      deleteClient\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(ClientProvider, \"rWfP1Ymurj232FYFvn1ccP7Bs4o=\");\n_c = ClientProvider;\nvar _c;\n$RefreshReg$(_c, \"ClientProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","useContext","clientService","AuthContext","jsxDEV","_jsxDEV","ClientContext","ClientProvider","children","_s","user","clients","setClients","selectedClient","setSelectedClient","loading","setLoading","error","setError","fetchClients","data","role","response","fetch","headers","localStorage","getItem","ok","json","Error","getClients","err","console","fetchClientById","clientId","getClientById","addClient","clientData","newClient","createClient","prevClients","updateClient","updatedData","updatedClient","map","client","_id","deleteClient","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/contexts/ClientContext.jsx"],"sourcesContent":["import React, { createContext, useState, useCallback, useContext } from 'react';\nimport * as clientService from '../services/client.service';\nimport { AuthContext } from './AuthContext';\n\nexport const ClientContext = createContext();\n\nexport const ClientProvider = ({ children }) => {\n    const { user } = useContext(AuthContext);\n    const [clients, setClients] = useState([]);\n    const [selectedClient, setSelectedClient] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const fetchClients = useCallback(async () => {\n        try {\n            setLoading(true);\n            setError(null);\n            \n            // If user is trainer, use trainer API, otherwise use regular client API\n            let data;\n            if (user && user.role === 'trainer') {\n                // Use trainer-specific API to get only their clients\n                const response = await fetch('http://localhost:5000/api/trainer/my-clients', {\n                    headers: {\n                        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n                        'Content-Type': 'application/json'\n                    }\n                });\n                if (response.ok) {\n                    data = await response.json();\n                } else {\n                    throw new Error('Failed to fetch trainer clients');\n                }\n            } else {\n                // Use regular client service (for admin)\n                data = await clientService.getClients();\n            }\n            \n            setClients(data);\n        } catch (err) {\n            console.error(\"Error fetching clients:\", err);\n            setError(\"Failed to load clients. Please try again later.\");\n        } finally {\n            setLoading(false);\n        }\n    }, [user]);\n\n    const fetchClientById = useCallback(async (clientId) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const data = await clientService.getClientById(clientId);\n            setSelectedClient(data);\n            return data;\n        } catch (err) {\n            console.error(`Error fetching client ${clientId}:`, err);\n            setError(\"Failed to load client details. Please try again later.\");\n            return null;\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    const addClient = async (clientData) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const newClient = await clientService.createClient(clientData);\n            setClients((prevClients) => [...prevClients, newClient]);\n            return newClient;\n        } catch (err) {\n            console.error(\"Error adding client:\", err);\n            setError(\"Failed to add client. Please try again later.\");\n            return null;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const updateClient = async (clientId, updatedData) => {\n        try {\n            setLoading(true);\n            setError(null);\n            const updatedClient = await clientService.updateClient(clientId, updatedData);\n            setClients((prevClients) =>\n                prevClients.map((client) => (client._id === clientId ? updatedClient : client))\n            );\n            \n            if (selectedClient && selectedClient._id === clientId) {\n                setSelectedClient(updatedClient);\n            }\n            \n            return updatedClient;\n        } catch (err) {\n            console.error(`Error updating client ${clientId}:`, err);\n            setError(\"Failed to update client. Please try again later.\");\n            return null;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const deleteClient = async (clientId) => {\n        try {\n            setLoading(true);\n            setError(null);\n            await clientService.deleteClient(clientId);\n            setClients((prevClients) => prevClients.filter((client) => client._id !== clientId));\n            \n            if (selectedClient && selectedClient._id === clientId) {\n                setSelectedClient(null);\n            }\n            \n            return true;\n        } catch (err) {\n            console.error(`Error deleting client ${clientId}:`, err);\n            setError(\"Failed to delete client. Please try again later.\");\n            return false;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <ClientContext.Provider \n            value={{ \n                clients, \n                selectedClient,\n                loading, \n                error, \n                fetchClients, \n                fetchClientById,\n                addClient, \n                updateClient, \n                deleteClient \n            }}\n        >\n            {children}\n        </ClientContext.Provider>\n    );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAC/E,OAAO,KAAKC,aAAa,MAAM,4BAA4B;AAC3D,SAASC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAAC,CAAC;AAE5C,OAAO,MAAMS,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM;IAAEC;EAAK,CAAC,GAAGT,UAAU,CAACE,WAAW,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMoB,YAAY,GAAGnB,WAAW,CAAC,YAAY;IACzC,IAAI;MACAgB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,IAAIE,IAAI;MACR,IAAIV,IAAI,IAAIA,IAAI,CAACW,IAAI,KAAK,SAAS,EAAE;QACjC;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8C,EAAE;UACzEC,OAAO,EAAE;YACL,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC1D,cAAc,EAAE;UACpB;QACJ,CAAC,CAAC;QACF,IAAIJ,QAAQ,CAACK,EAAE,EAAE;UACbP,IAAI,GAAG,MAAME,QAAQ,CAACM,IAAI,CAAC,CAAC;QAChC,CAAC,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;QACtD;MACJ,CAAC,MAAM;QACH;QACAT,IAAI,GAAG,MAAMlB,aAAa,CAAC4B,UAAU,CAAC,CAAC;MAC3C;MAEAlB,UAAU,CAACQ,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOW,GAAG,EAAE;MACVC,OAAO,CAACf,KAAK,CAAC,yBAAyB,EAAEc,GAAG,CAAC;MAC7Cb,QAAQ,CAAC,iDAAiD,CAAC;IAC/D,CAAC,SAAS;MACNF,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC;EAEV,MAAMuB,eAAe,GAAGjC,WAAW,CAAC,MAAOkC,QAAQ,IAAK;IACpD,IAAI;MACAlB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAME,IAAI,GAAG,MAAMlB,aAAa,CAACiC,aAAa,CAACD,QAAQ,CAAC;MACxDpB,iBAAiB,CAACM,IAAI,CAAC;MACvB,OAAOA,IAAI;IACf,CAAC,CAAC,OAAOW,GAAG,EAAE;MACVC,OAAO,CAACf,KAAK,CAAC,yBAAyBiB,QAAQ,GAAG,EAAEH,GAAG,CAAC;MACxDb,QAAQ,CAAC,wDAAwD,CAAC;MAClE,OAAO,IAAI;IACf,CAAC,SAAS;MACNF,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMoB,SAAS,GAAG,MAAOC,UAAU,IAAK;IACpC,IAAI;MACArB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMoB,SAAS,GAAG,MAAMpC,aAAa,CAACqC,YAAY,CAACF,UAAU,CAAC;MAC9DzB,UAAU,CAAE4B,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAEF,SAAS,CAAC,CAAC;MACxD,OAAOA,SAAS;IACpB,CAAC,CAAC,OAAOP,GAAG,EAAE;MACVC,OAAO,CAACf,KAAK,CAAC,sBAAsB,EAAEc,GAAG,CAAC;MAC1Cb,QAAQ,CAAC,+CAA+C,CAAC;MACzD,OAAO,IAAI;IACf,CAAC,SAAS;MACNF,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAMyB,YAAY,GAAG,MAAAA,CAAOP,QAAQ,EAAEQ,WAAW,KAAK;IAClD,IAAI;MACA1B,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMyB,aAAa,GAAG,MAAMzC,aAAa,CAACuC,YAAY,CAACP,QAAQ,EAAEQ,WAAW,CAAC;MAC7E9B,UAAU,CAAE4B,WAAW,IACnBA,WAAW,CAACI,GAAG,CAAEC,MAAM,IAAMA,MAAM,CAACC,GAAG,KAAKZ,QAAQ,GAAGS,aAAa,GAAGE,MAAO,CAClF,CAAC;MAED,IAAIhC,cAAc,IAAIA,cAAc,CAACiC,GAAG,KAAKZ,QAAQ,EAAE;QACnDpB,iBAAiB,CAAC6B,aAAa,CAAC;MACpC;MAEA,OAAOA,aAAa;IACxB,CAAC,CAAC,OAAOZ,GAAG,EAAE;MACVC,OAAO,CAACf,KAAK,CAAC,yBAAyBiB,QAAQ,GAAG,EAAEH,GAAG,CAAC;MACxDb,QAAQ,CAAC,kDAAkD,CAAC;MAC5D,OAAO,IAAI;IACf,CAAC,SAAS;MACNF,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAM+B,YAAY,GAAG,MAAOb,QAAQ,IAAK;IACrC,IAAI;MACAlB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMhB,aAAa,CAAC6C,YAAY,CAACb,QAAQ,CAAC;MAC1CtB,UAAU,CAAE4B,WAAW,IAAKA,WAAW,CAACQ,MAAM,CAAEH,MAAM,IAAKA,MAAM,CAACC,GAAG,KAAKZ,QAAQ,CAAC,CAAC;MAEpF,IAAIrB,cAAc,IAAIA,cAAc,CAACiC,GAAG,KAAKZ,QAAQ,EAAE;QACnDpB,iBAAiB,CAAC,IAAI,CAAC;MAC3B;MAEA,OAAO,IAAI;IACf,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACVC,OAAO,CAACf,KAAK,CAAC,yBAAyBiB,QAAQ,GAAG,EAAEH,GAAG,CAAC;MACxDb,QAAQ,CAAC,kDAAkD,CAAC;MAC5D,OAAO,KAAK;IAChB,CAAC,SAAS;MACNF,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACIX,OAAA,CAACC,aAAa,CAAC2C,QAAQ;IACnBC,KAAK,EAAE;MACHvC,OAAO;MACPE,cAAc;MACdE,OAAO;MACPE,KAAK;MACLE,YAAY;MACZc,eAAe;MACfG,SAAS;MACTK,YAAY;MACZM;IACJ,CAAE;IAAAvC,QAAA,EAEDA;EAAQ;IAAA2C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC,CAAC;AAAC7C,EAAA,CAtIWF,cAAc;AAAAgD,EAAA,GAAdhD,cAAc;AAAA,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}