{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitor Passagem\\\\Desktop\\\\TrainerTrack-project\\\\trainertrack\\\\client\\\\src\\\\components\\\\charts\\\\EvolutionChart.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EvolutionChart = ({\n  data,\n  metric,\n  title,\n  color = '#4F46E5',\n  unit = '',\n  height = 200\n}) => {\n  if (!data || data.length < 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Dados insuficientes para gerar o gr\\xE1fico\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Preparar dados para o gráfico\n  const chartData = data.map((item, index) => ({\n    value: parseFloat(item[metric]),\n    date: new Date(item.date),\n    index\n  }));\n\n  // Calcular valores min e max para escala\n  const values = chartData.map(d => d.value);\n  const minValue = Math.min(...values);\n  const maxValue = Math.max(...values);\n  const padding = (maxValue - minValue) * 0.1 || 1; // 10% de padding ou 1 se não há variação\n  const adjustedMin = minValue - padding;\n  const adjustedMax = maxValue + padding;\n\n  // Dimensões do gráfico\n  const width = 400;\n  const chartHeight = height - 60; // Espaço para labels\n  const chartPadding = {\n    top: 20,\n    right: 20,\n    bottom: 40,\n    left: 50\n  };\n\n  // Função para calcular posição Y\n  const getY = value => {\n    return chartPadding.top + (adjustedMax - value) / (adjustedMax - adjustedMin) * chartHeight;\n  };\n\n  // Função para calcular posição X\n  const getX = index => {\n    return chartPadding.left + index / (chartData.length - 1) * (width - chartPadding.left - chartPadding.right);\n  };\n\n  // Gerar pontos para a linha\n  const points = chartData.map((d, index) => `${getX(index)},${getY(d.value)}`).join(' ');\n\n  // Formatação de valores\n  const formatValue = value => {\n    if (unit === '%') return `${value.toFixed(1)}%`;\n    if (unit === 'kg') return `${value.toFixed(1)}kg`;\n    if (unit === 'cm') return `${value.toFixed(0)}cm`;\n    return value.toFixed(1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"evolution-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"chart-title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: width,\n        height: height,\n        className: \"evolution-chart-svg\",\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n            id: `grid-${metric}`,\n            width: \"40\",\n            height: \"20\",\n            patternUnits: \"userSpaceOnUse\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M 40 0 L 0 0 0 20\",\n              fill: \"none\",\n              stroke: \"#f0f0f0\",\n              strokeWidth: \"1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: chartPadding.left,\n          y: chartPadding.top,\n          width: width - chartPadding.left - chartPadding.right,\n          height: chartHeight,\n          fill: `url(#grid-${metric})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n          points: points,\n          fill: \"none\",\n          stroke: color,\n          strokeWidth: \"2\",\n          className: \"chart-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), chartData.map((d, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: getX(index),\n            cy: getY(d.value),\n            r: \"4\",\n            fill: color,\n            className: \"chart-point\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: getX(index),\n            cy: getY(d.value),\n            r: \"8\",\n            fill: \"transparent\",\n            className: \"chart-point-hover\",\n            \"data-value\": formatValue(d.value),\n            \"data-date\": d.date.toLocaleDateString('pt-BR')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)), [0, 0.25, 0.5, 0.75, 1].map((ratio, index) => {\n          const value = adjustedMin + (adjustedMax - adjustedMin) * ratio;\n          const y = chartPadding.top + chartHeight * (1 - ratio);\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"line\", {\n              x1: chartPadding.left - 5,\n              y1: y,\n              x2: chartPadding.left,\n              y2: y,\n              stroke: \"#666\",\n              strokeWidth: \"1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: chartPadding.left - 10,\n              y: y + 4,\n              textAnchor: \"end\",\n              className: \"chart-label\",\n              fontSize: \"11\",\n              fill: \"#666\",\n              children: formatValue(value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this);\n        }), chartData.map((d, index) => {\n          if (index % Math.ceil(chartData.length / 4) === 0 || index === chartData.length - 1) {\n            const x = getX(index);\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: x,\n                y1: chartPadding.top + chartHeight,\n                x2: x,\n                y2: chartPadding.top + chartHeight + 5,\n                stroke: \"#666\",\n                strokeWidth: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: x,\n                y: chartPadding.top + chartHeight + 18,\n                textAnchor: \"middle\",\n                className: \"chart-label\",\n                fontSize: \"10\",\n                fill: \"#666\",\n                children: d.date.toLocaleDateString('pt-BR', {\n                  month: 'short',\n                  day: 'numeric'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this);\n          }\n          return null;\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"Inicial:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-value\",\n          children: formatValue(chartData[0].value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"Atual:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-value\",\n          children: formatValue(chartData[chartData.length - 1].value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"stat-label\",\n          children: \"Varia\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `stat-value ${chartData[chartData.length - 1].value > chartData[0].value ? 'positive' : 'negative'}`,\n          children: [chartData[chartData.length - 1].value > chartData[0].value ? '+' : '', formatValue(chartData[chartData.length - 1].value - chartData[0].value)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_c = EvolutionChart;\nexport default EvolutionChart;\nvar _c;\n$RefreshReg$(_c, \"EvolutionChart\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","EvolutionChart","data","metric","title","color","unit","height","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","map","item","index","value","parseFloat","date","Date","values","d","minValue","Math","min","maxValue","max","padding","adjustedMin","adjustedMax","width","chartHeight","chartPadding","top","right","bottom","left","getY","getX","points","join","formatValue","toFixed","id","patternUnits","fill","stroke","strokeWidth","x","y","cx","cy","r","toLocaleDateString","ratio","x1","y1","x2","y2","textAnchor","fontSize","ceil","month","day","_c","$RefreshReg$"],"sources":["C:/Users/Vitor Passagem/Desktop/TrainerTrack-project/trainertrack/client/src/components/charts/EvolutionChart.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst EvolutionChart = ({ data, metric, title, color = '#4F46E5', unit = '', height = 200 }) => {\r\n    if (!data || data.length < 2) {\r\n        return (\r\n            <div className=\"chart-placeholder\">\r\n                <p>Dados insuficientes para gerar o gráfico</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Preparar dados para o gráfico\r\n    const chartData = data.map((item, index) => ({\r\n        value: parseFloat(item[metric]),\r\n        date: new Date(item.date),\r\n        index\r\n    }));\r\n\r\n    // Calcular valores min e max para escala\r\n    const values = chartData.map(d => d.value);\r\n    const minValue = Math.min(...values);\r\n    const maxValue = Math.max(...values);\r\n    const padding = (maxValue - minValue) * 0.1 || 1; // 10% de padding ou 1 se não há variação\r\n    const adjustedMin = minValue - padding;\r\n    const adjustedMax = maxValue + padding;\r\n\r\n    // Dimensões do gráfico\r\n    const width = 400;\r\n    const chartHeight = height - 60; // Espaço para labels\r\n    const chartPadding = { top: 20, right: 20, bottom: 40, left: 50 };\r\n\r\n    // Função para calcular posição Y\r\n    const getY = (value) => {\r\n        return chartPadding.top + ((adjustedMax - value) / (adjustedMax - adjustedMin)) * chartHeight;\r\n    };\r\n\r\n    // Função para calcular posição X\r\n    const getX = (index) => {\r\n        return chartPadding.left + (index / (chartData.length - 1)) * (width - chartPadding.left - chartPadding.right);\r\n    };\r\n\r\n    // Gerar pontos para a linha\r\n    const points = chartData.map((d, index) => `${getX(index)},${getY(d.value)}`).join(' ');\r\n\r\n    // Formatação de valores\r\n    const formatValue = (value) => {\r\n        if (unit === '%') return `${value.toFixed(1)}%`;\r\n        if (unit === 'kg') return `${value.toFixed(1)}kg`;\r\n        if (unit === 'cm') return `${value.toFixed(0)}cm`;\r\n        return value.toFixed(1);\r\n    };\r\n\r\n    return (\r\n        <div className=\"evolution-chart-container\">\r\n            <h4 className=\"chart-title\">{title}</h4>\r\n            \r\n            <div className=\"chart-wrapper\">\r\n                <svg width={width} height={height} className=\"evolution-chart-svg\">\r\n                    {/* Grade de fundo */}\r\n                    <defs>\r\n                        <pattern id={`grid-${metric}`} width=\"40\" height=\"20\" patternUnits=\"userSpaceOnUse\">\r\n                            <path d=\"M 40 0 L 0 0 0 20\" fill=\"none\" stroke=\"#f0f0f0\" strokeWidth=\"1\"/>\r\n                        </pattern>\r\n                    </defs>\r\n                    <rect \r\n                        x={chartPadding.left} \r\n                        y={chartPadding.top} \r\n                        width={width - chartPadding.left - chartPadding.right} \r\n                        height={chartHeight} \r\n                        fill={`url(#grid-${metric})`}\r\n                    />\r\n\r\n                    {/* Linha de conexão */}\r\n                    <polyline\r\n                        points={points}\r\n                        fill=\"none\"\r\n                        stroke={color}\r\n                        strokeWidth=\"2\"\r\n                        className=\"chart-line\"\r\n                    />\r\n\r\n                    {/* Pontos de dados */}\r\n                    {chartData.map((d, index) => (\r\n                        <g key={index}>\r\n                            <circle\r\n                                cx={getX(index)}\r\n                                cy={getY(d.value)}\r\n                                r=\"4\"\r\n                                fill={color}\r\n                                className=\"chart-point\"\r\n                            />\r\n                            {/* Tooltip invisível para hover */}\r\n                            <circle\r\n                                cx={getX(index)}\r\n                                cy={getY(d.value)}\r\n                                r=\"8\"\r\n                                fill=\"transparent\"\r\n                                className=\"chart-point-hover\"\r\n                                data-value={formatValue(d.value)}\r\n                                data-date={d.date.toLocaleDateString('pt-BR')}\r\n                            />\r\n                        </g>\r\n                    ))}\r\n\r\n                    {/* Eixo Y (valores) */}\r\n                    {[0, 0.25, 0.5, 0.75, 1].map((ratio, index) => {\r\n                        const value = adjustedMin + (adjustedMax - adjustedMin) * ratio;\r\n                        const y = chartPadding.top + chartHeight * (1 - ratio);\r\n                        return (\r\n                            <g key={index}>\r\n                                <line\r\n                                    x1={chartPadding.left - 5}\r\n                                    y1={y}\r\n                                    x2={chartPadding.left}\r\n                                    y2={y}\r\n                                    stroke=\"#666\"\r\n                                    strokeWidth=\"1\"\r\n                                />\r\n                                <text\r\n                                    x={chartPadding.left - 10}\r\n                                    y={y + 4}\r\n                                    textAnchor=\"end\"\r\n                                    className=\"chart-label\"\r\n                                    fontSize=\"11\"\r\n                                    fill=\"#666\"\r\n                                >\r\n                                    {formatValue(value)}\r\n                                </text>\r\n                            </g>\r\n                        );\r\n                    })}\r\n\r\n                    {/* Eixo X (datas) */}\r\n                    {chartData.map((d, index) => {\r\n                        if (index % Math.ceil(chartData.length / 4) === 0 || index === chartData.length - 1) {\r\n                            const x = getX(index);\r\n                            return (\r\n                                <g key={index}>\r\n                                    <line\r\n                                        x1={x}\r\n                                        y1={chartPadding.top + chartHeight}\r\n                                        x2={x}\r\n                                        y2={chartPadding.top + chartHeight + 5}\r\n                                        stroke=\"#666\"\r\n                                        strokeWidth=\"1\"\r\n                                    />\r\n                                    <text\r\n                                        x={x}\r\n                                        y={chartPadding.top + chartHeight + 18}\r\n                                        textAnchor=\"middle\"\r\n                                        className=\"chart-label\"\r\n                                        fontSize=\"10\"\r\n                                        fill=\"#666\"\r\n                                    >\r\n                                        {d.date.toLocaleDateString('pt-BR', { \r\n                                            month: 'short', \r\n                                            day: 'numeric' \r\n                                        })}\r\n                                    </text>\r\n                                </g>\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })}\r\n                </svg>\r\n            </div>\r\n\r\n            {/* Estatísticas do gráfico */}\r\n            <div className=\"chart-stats\">\r\n                <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Inicial:</span>\r\n                    <span className=\"stat-value\">{formatValue(chartData[0].value)}</span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Atual:</span>\r\n                    <span className=\"stat-value\">{formatValue(chartData[chartData.length - 1].value)}</span>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                    <span className=\"stat-label\">Variação:</span>\r\n                    <span className={`stat-value ${chartData[chartData.length - 1].value > chartData[0].value ? 'positive' : 'negative'}`}>\r\n                        {chartData[chartData.length - 1].value > chartData[0].value ? '+' : ''}\r\n                        {formatValue(chartData[chartData.length - 1].value - chartData[0].value)}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EvolutionChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}